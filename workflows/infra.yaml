name: Update Azure Infra

on:
  workflow_dispatch:
    inputs:
      terraform-choice:
        type: choice
        description: Select the action for the infra
        options:
        - create/update
        - destroy
      env-choice:
        type: choice
        description: Select the Environment
        options:
        - dev
        - stage
        - prod

env:
  tf_version: '1.7.4'
  tf_working_dir: 'iac/terraform/envs/${{ inputs.env-choice }}'
  aws_region: 'us-east-1'

permissions:
      id-token: write
      contents: read  

jobs:
  update-infra:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env-choice }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: 'Setup Terraform'
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
          terraform_version: ${{ env.tf_version }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT }}:role/github-actions-oidc-role
          aws-region: ${{ env.aws_region }}

      - name: 'terraform init'
        working-directory: ${{ env.tf_working_dir }}
        run: |
          terraform init

      - name: 'terraform plan'
        if: inputs.terraform-choice == 'create/update'
        working-directory: ${{ env.tf_working_dir }}
        run: |
          terraform plan \
            -var-file=${{ inputs.env-choice }}.tfvars

      - name: 'terraform apply'
        if: inputs.terraform-choice == 'create/update'
        working-directory: ${{ env.tf_working_dir }}
        run: |
          terraform apply -auto-approve \
            -var-file=${{ inputs.env-choice }}.tfvars

      - name: 'terraform destroy-all'
        if: inputs.terraform-choice == 'destroy'
        working-directory: ${{ env.tf_working_dir }}
        run: |
          terraform destroy -auto-approve \
            -var-file=${{ inputs.env-choice }}.tfvars
